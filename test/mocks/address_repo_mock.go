// Code generated by MockGen. DO NOT EDIT.
// Source: internal/address/type.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	entities "sika/pkg/storage/entities"

	gomock "github.com/golang/mock/gomock"
)

// MockRepo is a mock of address.Repo interface.
type MockAddressRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAddressRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockAddressRepoMockRecorder struct {
	mock *MockAddressRepo
}

// NewMockRepo creates a new mock instance.
func NewMockAddressRepo(ctrl *gomock.Controller) *MockAddressRepo {
	mock := &MockAddressRepo{ctrl: ctrl}
	mock.recorder = &MockAddressRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddressRepo) EXPECT() *MockAddressRepoMockRecorder {
	return m.recorder
}

// ClearAllAddressesDataFromDB mocks base method.
func (m *MockAddressRepo) ClearAllAddressesDataFromDB() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearAllAddressesDataFromDB")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearAllAddressesDataFromDB indicates an expected call of ClearAllAddressesDataFromDB.
func (mr *MockAddressRepoMockRecorder) ClearAllAddressesDataFromDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearAllAddressesDataFromDB", reflect.TypeOf((*MockAddressRepo)(nil).ClearAllAddressesDataFromDB))
}

// CreateAddress mocks base method.
func (m *MockAddressRepo) CreateAddress(ctx context.Context, a *entities.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAddress", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAddress indicates an expected call of CreateAddress.
func (mr *MockAddressRepoMockRecorder) CreateAddress(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAddress", reflect.TypeOf((*MockAddressRepo)(nil).CreateAddress), ctx, a)
}

// CreateBatchAddresses mocks base method.
func (m *MockAddressRepo) CreateBatchAddresses(ctx context.Context, adds []entities.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBatchAddresses", ctx, adds)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBatchAddresses indicates an expected call of CreateBatchAddresses.
func (mr *MockAddressRepoMockRecorder) CreateBatchAddresses(ctx, adds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBatchAddresses", reflect.TypeOf((*MockAddressRepo)(nil).CreateBatchAddresses), ctx, adds)
}

// GetAddressByUser mocks base method.
func (m *MockAddressRepo) GetAddressByUser(ctx context.Context, userID string) ([]entities.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressByUser", ctx, userID)
	ret0, _ := ret[0].([]entities.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressByUser indicates an expected call of GetAddressByUser.
func (mr *MockAddressRepoMockRecorder) GetAddressByUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressByUser", reflect.TypeOf((*MockAddressRepo)(nil).GetAddressByUser), ctx, userID)
}
