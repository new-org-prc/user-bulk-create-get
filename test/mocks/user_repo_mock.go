// Code generated by MockGen. DO NOT EDIT.
// Source: internal/user/type.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	entities "sika/pkg/storage/entities"

	gomock "github.com/golang/mock/gomock"
)

// MockRepo is a mock of user.Repo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// ClearAllUsersDataFromDB mocks base method.
func (m *MockUserRepo) ClearAllUsersDataFromDB() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearAllUsersDataFromDB")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearAllUsersDataFromDB indicates an expected call of ClearAllUsersDataFromDB.
func (mr *MockUserRepoMockRecorder) ClearAllUsersDataFromDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearAllUsersDataFromDB", reflect.TypeOf((*MockUserRepo)(nil).ClearAllUsersDataFromDB))
}

// CreateBatchUsers mocks base method.
func (m *MockUserRepo) CreateBatchUsers(ctx context.Context, users []entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBatchUsers", ctx, users)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBatchUsers indicates an expected call of CreateBatchUsers.
func (mr *MockUserRepoMockRecorder) CreateBatchUsers(ctx, users interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBatchUsers", reflect.TypeOf((*MockUserRepo)(nil).CreateBatchUsers), ctx, users)
}

// CreateUser mocks base method.
func (m *MockUserRepo) CreateUser(ctx context.Context, user *entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepoMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepo)(nil).CreateUser), ctx, user)
}

// GetUserByID mocks base method.
func (m *MockUserRepo) GetUserByID(ctx context.Context, id string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserRepoMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserRepo)(nil).GetUserByID), ctx, id)
}
